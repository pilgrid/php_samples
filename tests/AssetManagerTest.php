<?php
$path = '/www/data/ubik.trutv.com/cache-versioning';
set_include_path(get_include_path() . PATH_SEPARATOR . $path);
require('AssetManager.php');
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-04-07 at 14:55:46.
 */
class AssetManagerTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var AssetManager
     */

    protected $am_none;
    protected $am_qs;
    protected $am_path;
    protected $am_now;
    protected $am_mod;

    protected $server_root;
    protected $file ;
    protected $sha1;
    protected $ts;
    protected $ch;
    protected $resource;
    protected $mod_resource;
    protected $path_resource;
    protected $qs_resource;

    protected $uri_default; //cdn   NONE
    protected $uri_qs; //cdn        QUERYSTRING
    protected $uri_path; //cdn        PATH
    protected $uri_zip; //cdnzip
    protected $uri_ssl; //cdnssl
    protected $uri_now; //cdnnow    EXPIRESNOW
    protected $uri_mod; //cdnmod    TIMESTAMP

    const CDN='http://i.cdn.ubik.trutv.com/trutv/trutv.com';
    const CDNZIP='http://z.cdn.ubik.trutv.com/trutv/trutv.com';
    const CDNSSL='http://i.cdn.ubik.trutv.com/trutv/trutv.com';
    const CDNNOW='http://now.cdn.ubik.trutv.com/trutv/trutv.com';
    const CDNMOD='http://mod.cdn.ubik.trutv.com/trutv/trutv.com';


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->resource = '/img/spiral.png';
        $this->server_root = '/www/data/ubik.trutv.com';
        $this->file = $this->server_root.$this->resource;
        $this->sha1 = substr(sha1_file($this->file),0,7);
        $this->qs_resource = $this->resource.'?v='.$this->sha1;
        $this->path_resource = '/far-future/'.$this->sha1.$this->resource;
        $this->ts = filemtime($this->file);
        $path = pathinfo($this->resource);
        $this->mod_resource = $path['dirname'].'/'.str_replace('.', '.'.$this->ts.'.', $path['basename']);

        $this->ch = curl_init();
        curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($this->ch, CURLOPT_NOBODY, 1);
        curl_setopt($this->ch, CURLOPT_HEADER,1);


        $this->uri_default = self::CDN.$this->resource;
        $this->uri_qs = self::CDN.$this->qs_resource;
        $this->uri_path = self::CDN.$this->path_resource;
        $this->uri_zip = self::CDNZIP.$this->resource;
        $this->uri_ssl = self::CDNSSL.$this->resource;
        $this->uri_now = self::CDNNOW.$this->resource;
        $this->uri_mod = self::CDNMOD.$this->mod_resource;



        $this->am_none = new AssetManager($this->resource,AssetManager::VERSIONING_NONE);
        $this->am_qs = new AssetManager($this->resource,AssetManager::VERSIONING_QUERYSTRING);
        $this->am_path = new AssetManager($this->resource,AssetManager::VERSIONING_PATH);
        $this->am_now = new AssetManager($this->resource,AssetManager::VERSIONING_EXPIRESNOW);
        $this->am_mod = new AssetManager($this->resource,AssetManager::VERSIONING_TIMESTAMP);
    }

    /**
     * covers AssetManager::__construct
     */
    function testAssetManager() {
        // test with NULL asset
        $am = new AssetManager();

        $this->assertEquals('/graphics/spacer.gif',$am->getAsset());
        //$this->assertEquals($this->resource,$this->am_none->getAsset());

    }

    public function testDocroot () {
        $this->assertAttributeEquals('/www/data/ubik.trutv.com', 'docroot', $this->am_none);
    }

    /**
     * covers AssetManager::u
     * @todo   Implement testU().
     */
    public function testU()
    {

        // no versioning
        $expected = $this->uri_default;
        $actual = $this->am_none->u();
        $this->assertEquals($expected,$actual,'testing default method');

        // query string versioning
        $expected = $this->uri_qs;
        $actual=$this->am_qs->u();
        $this->assertEquals($expected, $actual,'query string');

        // path versioning
        $expected = $this->uri_path;
        $actual = $this->am_path->u();
        $this->assertEquals($expected,$actual,'path');

        // timestamp versioning
        $expected = $this->uri_mod;
        $actual = $this->am_mod->u();
        $this->assertEquals($expected,$actual,'mod');

        // expires now cdn
        $expected = $this->uri_now;
        $actual = $this->am_now->u();
        $this->assertEquals($expected,$actual,'expires now');

    }
    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

//
//    public function testIsStaticAsset() {
//        $this->assertTrue($this->am_qs->isStaticAsset());
//    }

//    public function testSquash() {
//        $this->assertEquals($this->resource,$this->am_qs->squash());
//    }

//    public function testGetVersioningMethod() {
//        $this->assertEquals(AssetManager::VERSIONING_QUERYSTRING,$this->am_qs->getVersioningMethod());
//        //$this->assertEquals(1,$this->am_qs->getVersioningMethod());
//    }
//    public function testDoPassthru() {
//        $this->assertFalse($this->am_qs->doPassthru());
//    }


//
//    /**
//     * covers AssetManager::getFingerprint
//     */
//    public function testGetFingerprint() {
//        $fingerprint=substr(sha1_file($this->file),0,7);
//
//        $this->assertEquals($fingerprint, $this->am_none->getFingerprint());
//        return $fingerprint;
//    }


//
//    /**
//     * covers AssetManager::fingerprintPath
//     * @todo   Implement testFingerprintPath().
//     * @depends testGetFingerprint
//     */
//    public function testFingerprintPath($fingerprint)
//    {
//        $expected = '/far-future/'.$fingerprint.$this->resource;
//        $actual = $this->am_mod->fingerprintPath($this->resource);
//        $this->assertEquals($expected,$actual);
//    }


    /*
    public function testCacheControl() {


        curl_setopt($this->ch, CURLOPT_URL, "http://ubik.trutv.com/img/spiral.png");

        $pattern = "/Cache-Control: (?P<name>.*)=(?P<value>.*)/";
        preg_match($pattern, $output,$matches);
        print_r($matches);
    }

    function testExpires($output) {
        $pattern = "/Expires: (?P<value>.*)/";
        preg_match($pattern, $output,$matches);
        print_r($matches);
    }
*/
}
